<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="29" failures="0" errors="0" time="3.45">
  <testsuite name="AppController" errors="0" failures="0" skipped="0" timestamp="2024-11-22T19:35:59" time="2.613" tests="1">
    <testcase classname="AppController root should return &quot;Hello World!&quot;" name="AppController root should return &quot;Hello World!&quot;" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="PreferencesService" errors="0" failures="0" skipped="0" timestamp="2024-11-22T19:35:59" time="3.097" tests="11">
    <testcase classname="PreferencesService Input Validation createPreference should throw BadRequestException for empty userId" name="PreferencesService Input Validation createPreference should throw BadRequestException for empty userId" time="0.014">
    </testcase>
    <testcase classname="PreferencesService Input Validation createPreference should throw BadRequestException for invalid email" name="PreferencesService Input Validation createPreference should throw BadRequestException for invalid email" time="0.002">
    </testcase>
    <testcase classname="PreferencesService Input Validation createPreference should throw BadRequestException for invalid preferences frequency" name="PreferencesService Input Validation createPreference should throw BadRequestException for invalid preferences frequency" time="0.001">
    </testcase>
    <testcase classname="PreferencesService Input Validation updatePreference should throw BadRequestException for invalid partial update" name="PreferencesService Input Validation updatePreference should throw BadRequestException for invalid partial update" time="0.001">
    </testcase>
    <testcase classname="PreferencesService Existing Preferences should throw ConflictException when creating duplicate preferences" name="PreferencesService Existing Preferences should throw ConflictException when creating duplicate preferences" time="0.001">
    </testcase>
    <testcase classname="PreferencesService Retrieve Preferences should retrieve user preferences" name="PreferencesService Retrieve Preferences should retrieve user preferences" time="0.001">
    </testcase>
    <testcase classname="PreferencesService Retrieve Preferences should throw NotFoundException if preferences not found" name="PreferencesService Retrieve Preferences should throw NotFoundException if preferences not found" time="0.001">
    </testcase>
    <testcase classname="PreferencesService Update Preferences should update user preferences" name="PreferencesService Update Preferences should update user preferences" time="0">
    </testcase>
    <testcase classname="PreferencesService Update Preferences should throw NotFoundException if preferences not found during update" name="PreferencesService Update Preferences should throw NotFoundException if preferences not found during update" time="0.001">
    </testcase>
    <testcase classname="PreferencesService Delete Preferences should delete user preferences" name="PreferencesService Delete Preferences should delete user preferences" time="0">
    </testcase>
    <testcase classname="PreferencesService Delete Preferences should throw NotFoundException if preferences not found during deletion" name="PreferencesService Delete Preferences should throw NotFoundException if preferences not found during deletion" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="NotificationsService" errors="0" failures="0" skipped="0" timestamp="2024-11-22T19:35:59" time="3.12" tests="17">
    <testcase classname="NotificationsService sendNotification should successfully send a notification" name="NotificationsService sendNotification should successfully send a notification" time="0.007">
    </testcase>
    <testcase classname="NotificationsService sendNotification should throw NotFoundException if user preferences not found" name="NotificationsService sendNotification should throw NotFoundException if user preferences not found" time="0.007">
    </testcase>
    <testcase classname="NotificationsService sendNotification should throw BadRequestException for disabled channel" name="NotificationsService sendNotification should throw BadRequestException for disabled channel" time="0.001">
    </testcase>
    <testcase classname="NotificationsService sendNotification should throw BadRequestException for disabled notification type" name="NotificationsService sendNotification should throw BadRequestException for disabled notification type" time="0.001">
    </testcase>
    <testcase classname="NotificationsService sendNotification Invalid Input Validation should throw BadRequestException for empty userId" name="NotificationsService sendNotification Invalid Input Validation should throw BadRequestException for empty userId" time="0.001">
    </testcase>
    <testcase classname="NotificationsService sendNotification Invalid Input Validation should throw BadRequestException for invalid notification type" name="NotificationsService sendNotification Invalid Input Validation should throw BadRequestException for invalid notification type" time="0.001">
    </testcase>
    <testcase classname="NotificationsService sendNotification Invalid Input Validation should throw BadRequestException for invalid channel" name="NotificationsService sendNotification Invalid Input Validation should throw BadRequestException for invalid channel" time="0.001">
    </testcase>
    <testcase classname="NotificationsService sendNotification Boundary Condition Tests should handle maximum content length" name="NotificationsService sendNotification Boundary Condition Tests should handle maximum content length" time="0.001">
    </testcase>
    <testcase classname="NotificationsService sendNotification Comprehensive Error Scenarios should throw specific error for disabled marketing notifications" name="NotificationsService sendNotification Comprehensive Error Scenarios should throw specific error for disabled marketing notifications" time="0.001">
    </testcase>
    <testcase classname="NotificationsService getUserNotificationLogs should retrieve notification logs without filters" name="NotificationsService getUserNotificationLogs should retrieve notification logs without filters" time="0.001">
    </testcase>
    <testcase classname="NotificationsService getUserNotificationLogs should retrieve notification logs with filters" name="NotificationsService getUserNotificationLogs should retrieve notification logs with filters" time="0">
    </testcase>
    <testcase classname="NotificationsService getUserNotificationLogs should retrieve notification logs with status filter" name="NotificationsService getUserNotificationLogs should retrieve notification logs with status filter" time="0.001">
    </testcase>
    <testcase classname="NotificationsService getUserNotificationLogs should retrieve notification logs with multiple filters" name="NotificationsService getUserNotificationLogs should retrieve notification logs with multiple filters" time="0">
    </testcase>
    <testcase classname="NotificationsService getUserNotificationLogs should handle multiple simultaneous filter conditions in logs" name="NotificationsService getUserNotificationLogs should handle multiple simultaneous filter conditions in logs" time="0.001">
    </testcase>
    <testcase classname="NotificationsService getNotificationStats should retrieve notification stats for a user" name="NotificationsService getNotificationStats should retrieve notification stats for a user" time="0.001">
    </testcase>
    <testcase classname="NotificationsService getGlobalNotificationStats should retrieve global notification stats" name="NotificationsService getGlobalNotificationStats should retrieve global notification stats" time="0">
    </testcase>
    <testcase classname="NotificationsService convertAggregateToObject should convert aggregate result to object" name="NotificationsService convertAggregateToObject should convert aggregate result to object" time="0.001">
    </testcase>
  </testsuite>
</testsuites>